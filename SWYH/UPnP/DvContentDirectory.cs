/*
 *	 Stream What Your Hear
 *	 Assembly: SWYH
 *	 File: DvContentDirectory.cs
 *	 Web site: http://www.streamwhatyouhear.com
 *	 Copyright (C) 2012-2017 - Sebastien Warin <http://sebastien.warin.fr> and others	
 *
 *   This file is part of Stream What Your Hear.
 *	 
 *	 Stream What Your Hear is free software: you can redistribute it and/or modify
 *	 it under the terms of the GNU General Public License as published by
 *	 the Free Software Foundation, either version 2 of the License, or
 *	 (at your option) any later version.
 *	 
 *	 Stream What Your Hear is distributed in the hope that it will be useful,
 *	 but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	 GNU General Public License for more details.
 *	 
 *	 You should have received a copy of the GNU General Public License
 *	 along with Stream What Your Hear. If not, see <http://www.gnu.org/licenses/>.
 */

namespace SWYH.UPnP
{
    using OpenSource.UPnP;
    using OpenSource.UPnP.AV.CdsMetadata;
    using SWYH.Audio;
    using System;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Sockets;
    using System.Text;
    using System.Web;
    using System.Xml;

    /// <summary>
    /// Transparent DeviceSide UPnP Service
    /// </summary>
    internal class DvContentDirectory : IUPnPService
    {
        private const string constRoot = "0";
        private const string constMusicItem = "4";
        private const string constMusicGenre = "5";
        private const string constMusicArtist = "6";
        private const string constMusicAlbum = "7";
        private const string constMusicPlaylist = "F";
        private const string constMusic = "14";
        private const string constVideos = "15";
        private const string constPictures = "16";

        #region AutoGenerated Code Section [Do NOT Modify, unless you know what you're doing]
        //{{{{{ Begin Code Block

        private _DvContentDirectory _S;
        public static string URN = "urn:schemas-upnp-org:service:ContentDirectory:1";
        public double VERSION
        {
            get
            {
                return (double.Parse(_S.GetUPnPService().Version));
            }
        }

        public enum Enum_A_ARG_TYPE_BrowseFlag
        {
            BROWSEMETADATA,
            BROWSEDIRECTCHILDREN,
        }
        /// <summary>
        /// This variable is used in conjunction with the browse actions. A BrowseFlag parameter 
        /// specifies a browse option to be used for browsing the Content Directory. Valid values are:
        ///   BrowseMetadata - this indicates that the properties of the object specified by the ObjectID 
        ///   parameter will be returned in the result.
        ///   BrowseDirectChildren - this indicates that first level objects under the object specified 
        ///   by ObjectID parameter will be returned in the result, as well as the metadata of all 
        ///   objects specified.
        /// </summary>
        public Enum_A_ARG_TYPE_BrowseFlag A_ARG_TYPE_BrowseFlag
        {
            set
            {
                string v = "";
                switch (value)
                {
                    case Enum_A_ARG_TYPE_BrowseFlag.BROWSEMETADATA:
                        v = "BrowseMetadata";
                        break;
                    case Enum_A_ARG_TYPE_BrowseFlag.BROWSEDIRECTCHILDREN:
                        v = "BrowseDirectChildren";
                        break;
                }
                _S.SetStateVariable("A_ARG_TYPE_BrowseFlag", v);
            }
            get
            {
                Enum_A_ARG_TYPE_BrowseFlag RetVal = 0;
                string v = (string)_S.GetStateVariable("A_ARG_TYPE_BrowseFlag");
                switch (v)
                {
                    case "BrowseMetadata":
                        RetVal = Enum_A_ARG_TYPE_BrowseFlag.BROWSEMETADATA;
                        break;
                    case "BrowseDirectChildren":
                        RetVal = Enum_A_ARG_TYPE_BrowseFlag.BROWSEDIRECTCHILDREN;
                        break;
                }
                return (RetVal);
            }
        }
        static public string Enum_A_ARG_TYPE_BrowseFlag_ToString(Enum_A_ARG_TYPE_BrowseFlag en)
        {
            string RetVal = "";
            switch (en)
            {
                case Enum_A_ARG_TYPE_BrowseFlag.BROWSEMETADATA:
                    RetVal = "BrowseMetadata";
                    break;
                case Enum_A_ARG_TYPE_BrowseFlag.BROWSEDIRECTCHILDREN:
                    RetVal = "BrowseDirectChildren";
                    break;
            }
            return (RetVal);
        }
        static public string[] Values_A_ARG_TYPE_BrowseFlag
        {
            get
            {
                string[] RetVal = new string[2] { "BrowseDirectChildren", "BrowseMetadata" };
                return (RetVal);
            }
        }
        public delegate void OnStateVariableModifiedHandler(DvContentDirectory sender);
        public event OnStateVariableModifiedHandler OnStateVariableModified_A_ARG_TYPE_BrowseFlag;
        public event OnStateVariableModifiedHandler OnStateVariableModified_ContainerUpdateIDs;
        public event OnStateVariableModifiedHandler OnStateVariableModified_SystemUpdateID;
        public event OnStateVariableModifiedHandler OnStateVariableModified_A_ARG_TYPE_Count;
        public event OnStateVariableModifiedHandler OnStateVariableModified_A_ARG_TYPE_SortCriteria;
        public event OnStateVariableModifiedHandler OnStateVariableModified_SortCapabilities;
        public event OnStateVariableModifiedHandler OnStateVariableModified_A_ARG_TYPE_Index;
        public event OnStateVariableModifiedHandler OnStateVariableModified_A_ARG_TYPE_ObjectID;
        public event OnStateVariableModifiedHandler OnStateVariableModified_A_ARG_TYPE_UpdateID;
        public event OnStateVariableModifiedHandler OnStateVariableModified_A_ARG_TYPE_Result;
        public event OnStateVariableModifiedHandler OnStateVariableModified_SearchCapabilities;
        public event OnStateVariableModifiedHandler OnStateVariableModified_A_ARG_TYPE_SearchCriteria;
        public event OnStateVariableModifiedHandler OnStateVariableModified_A_ARG_TYPE_Filter;
        public event OnStateVariableModifiedHandler OnStateVariableModified_A_ARG_TYPE_Featurelist;
        public System.String Evented_ContainerUpdateIDs
        {
            get
            {
                Console.WriteLine("Evented_ContainerUpdateIDs");
                return ((System.String)_S.GetStateVariable("ContainerUpdateIDs"));
            }
            set
            {
                _S.SetStateVariable("ContainerUpdateIDs", value);
            }
        }
        public System.UInt32 Evented_SystemUpdateID
        {
            get
            {
                Console.WriteLine("Evented_SystemUpdateID");
                return ((System.UInt32)_S.GetStateVariable("SystemUpdateID"));
            }
            set
            {
                _S.SetStateVariable("SystemUpdateID", value);
            }
        }
        /// <summary>
        /// This variable is used in conjunction with those actions that include a Count parameter. 
        /// Count parameters specify an ordinal number of arbitrary objects.
        /// </summary>
        public System.UInt32 A_ARG_TYPE_Count
        {
            get
            {
                return ((System.UInt32)_S.GetStateVariable("A_ARG_TYPE_Count"));
            }
            set
            {
                _S.SetStateVariable("A_ARG_TYPE_Count", value);
            }
        }
        /// <summary>
        /// This variable is used in conjunction with those actions that include a SortCriteria parameter.
        /// A_ARG_TYPE_SortCriteria is CSV list of signed property names, where signed means preceded by 
        /// ‘+’ or ‘-’ sign. The ‘+’ and ‘-’ indicate the sort is in ascending or descending order, 
        /// respectively, with regard to the value of its associated property. Properties appear in the 
        /// list in order of descending sort priority. For example, a value of 
        /// "+upnp:artist,-dc:date,+dc:title" would sort first on artist in ascending order, then 
        /// within each artist by date in descending order (most recent first) and finally by title in 
        /// ascending order. An empty string indicates no sorting requested.
        /// </summary>
        public System.String A_ARG_TYPE_SortCriteria
        {
            get
            {
                return ((System.String)_S.GetStateVariable("A_ARG_TYPE_SortCriteria"));
            }
            set
            {
                _S.SetStateVariable("A_ARG_TYPE_SortCriteria", value);
            }
        }
        public System.String SortCapabilities
        {
            get
            {
                return ((System.String)_S.GetStateVariable("SortCapabilities"));
            }
            set
            {
                _S.SetStateVariable("SortCapabilities", value);
            }
        }
        /// <summary>
        /// This variable is used in conjunction with those actions that include an Index parameter. 
        /// Index parameters specify an offset into an arbitrary list of objects. A value of 0 represents 
        /// the first object in the list.
        /// </summary>
        public System.UInt32 A_ARG_TYPE_Index
        {
            get
            {
                return ((System.UInt32)_S.GetStateVariable("A_ARG_TYPE_Index"));
            }
            set
            {
                _S.SetStateVariable("A_ARG_TYPE_Index", value);
            }
        }
        /// <summary>
        /// This variable is used in conjunction with those actions that include an ObjectID parameter. 
        /// ObjectID parameters uniquely identify individual objects within the Content Directory Service.
        /// </summary>
        public System.String A_ARG_TYPE_ObjectID
        {
            get
            {
                return ((System.String)_S.GetStateVariable("A_ARG_TYPE_ObjectID"));
            }
            set
            {
                _S.SetStateVariable("A_ARG_TYPE_ObjectID", value);
            }
        }
        /// <summary>
        /// This variable is used in conjunction with any action that includes an UpdateID parameter.
        /// A_ARG_TYPE_UpdateID is the related state variable for the return parameter UpdateID used in 
        /// Browse() and Search() actions. The return value will either be the SystemUpdateID 
        /// (sec. 2.5.20 below) or a ContainerUpdateID (see Terms table, sec. Error! Reference source 
        /// not found.)
        /// </summary>
        public System.UInt32 A_ARG_TYPE_UpdateID
        {
            get
            {
                return ((System.UInt32)_S.GetStateVariable("A_ARG_TYPE_UpdateID"));
            }
            set
            {
                _S.SetStateVariable("A_ARG_TYPE_UpdateID", value);
            }
        }
        /// <summary>
        /// This variable is used in conjunction with those actions that include a Result parameter. 
        /// The structure of the result is a DIDL-Lite XML fragment:
        /// </summary>
        public System.String A_ARG_TYPE_Result
        {
            get
            {
                return ((System.String)_S.GetStateVariable("A_ARG_TYPE_Result"));
            }
            set
            {
                _S.SetStateVariable("A_ARG_TYPE_Result", value);
            }
        }
        public System.String SearchCapabilities
        {
            get
            {
                return ((System.String)_S.GetStateVariable("SearchCapabilities"));
            }
            set
            {
                _S.SetStateVariable("SearchCapabilities", value);
            }
        }
        /// <summary>
        /// A_ARG_TYPE_SearchCriteria is the related state variable for the SearchCriteria parameter 
        /// used in search actions. The SearchCriteria parameter gives one or more search criteria to 
        /// be used for querying the Content Directory.
        /// </summary>
        public System.String A_ARG_TYPE_SearchCriteria
        {
            get
            {
                return ((System.String)_S.GetStateVariable("A_ARG_TYPE_SearchCriteria"));
            }
            set
            {
                _S.SetStateVariable("A_ARG_TYPE_SearchCriteria", value);
            }
        }
        /// <summary>
        /// This variable is used in conjunction with those actions that include a Filter parameter. 
        /// The comma-separated list of property specifiers (including namespaces) indicates which 
        /// metadata properties are to be returned in the results from browsing or searching.
        /// </summary>
        public System.String A_ARG_TYPE_Filter
        {
            get
            {
                return ((System.String)_S.GetStateVariable("A_ARG_TYPE_Filter"));
            }
            set
            {
                _S.SetStateVariable("A_ARG_TYPE_Filter", value);
            }
        }
        /// <summary>
        /// Samsung vendor
        /// </summary>
        public System.String A_ARG_TYPE_Featurelist
        {
            get
            {
                return ((System.String)_S.GetStateVariable("A_ARG_TYPE_Featurelist"));
            }
            set
            {
                _S.SetStateVariable("A_ARG_TYPE_Featurelist", value);
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_A_ARG_TYPE_BrowseFlag
        {
            get
            {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_BrowseFlag")).Accumulator);
            }
            set
            {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_BrowseFlag")).Accumulator = value;
            }
        }
        public double ModerationDuration_A_ARG_TYPE_BrowseFlag
        {
            get
            {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_BrowseFlag")).ModerationPeriod);
            }
            set
            {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_BrowseFlag")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_ContainerUpdateIDs
        {
            get
            {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ContainerUpdateIDs")).Accumulator);
            }
            set
            {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ContainerUpdateIDs")).Accumulator = value;
            }
        }
        public double ModerationDuration_ContainerUpdateIDs
        {
            get
            {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ContainerUpdateIDs")).ModerationPeriod);
            }
            set
            {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("ContainerUpdateIDs")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_SystemUpdateID
        {
            get
            {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("SystemUpdateID")).Accumulator);
            }
            set
            {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("SystemUpdateID")).Accumulator = value;
            }
        }
        public double ModerationDuration_SystemUpdateID
        {
            get
            {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("SystemUpdateID")).ModerationPeriod);
            }
            set
            {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("SystemUpdateID")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_A_ARG_TYPE_Count
        {
            get
            {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Count")).Accumulator);
            }
            set
            {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Count")).Accumulator = value;
            }
        }
        public double ModerationDuration_A_ARG_TYPE_Count
        {
            get
            {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Count")).ModerationPeriod);
            }
            set
            {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Count")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_A_ARG_TYPE_SortCriteria
        {
            get
            {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_SortCriteria")).Accumulator);
            }
            set
            {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_SortCriteria")).Accumulator = value;
            }
        }
        public double ModerationDuration_A_ARG_TYPE_SortCriteria
        {
            get
            {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_SortCriteria")).ModerationPeriod);
            }
            set
            {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_SortCriteria")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_SortCapabilities
        {
            get
            {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("SortCapabilities")).Accumulator);
            }
            set
            {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("SortCapabilities")).Accumulator = value;
            }
        }
        public double ModerationDuration_SortCapabilities
        {
            get
            {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("SortCapabilities")).ModerationPeriod);
            }
            set
            {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("SortCapabilities")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_A_ARG_TYPE_Index
        {
            get
            {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Index")).Accumulator);
            }
            set
            {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Index")).Accumulator = value;
            }
        }
        public double ModerationDuration_A_ARG_TYPE_Index
        {
            get
            {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Index")).ModerationPeriod);
            }
            set
            {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Index")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_A_ARG_TYPE_ObjectID
        {
            get
            {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_ObjectID")).Accumulator);
            }
            set
            {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_ObjectID")).Accumulator = value;
            }
        }
        public double ModerationDuration_A_ARG_TYPE_ObjectID
        {
            get
            {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_ObjectID")).ModerationPeriod);
            }
            set
            {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_ObjectID")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_A_ARG_TYPE_UpdateID
        {
            get
            {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_UpdateID")).Accumulator);
            }
            set
            {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_UpdateID")).Accumulator = value;
            }
        }
        public double ModerationDuration_A_ARG_TYPE_UpdateID
        {
            get
            {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_UpdateID")).ModerationPeriod);
            }
            set
            {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_UpdateID")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_A_ARG_TYPE_Result
        {
            get
            {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Result")).Accumulator);
            }
            set
            {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Result")).Accumulator = value;
            }
        }
        public double ModerationDuration_A_ARG_TYPE_Result
        {
            get
            {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Result")).ModerationPeriod);
            }
            set
            {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Result")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_SearchCapabilities
        {
            get
            {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("SearchCapabilities")).Accumulator);
            }
            set
            {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("SearchCapabilities")).Accumulator = value;
            }
        }
        public double ModerationDuration_SearchCapabilities
        {
            get
            {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("SearchCapabilities")).ModerationPeriod);
            }
            set
            {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("SearchCapabilities")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_A_ARG_TYPE_SearchCriteria
        {
            get
            {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_SearchCriteria")).Accumulator);
            }
            set
            {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_SearchCriteria")).Accumulator = value;
            }
        }
        public double ModerationDuration_A_ARG_TYPE_SearchCriteria
        {
            get
            {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_SearchCriteria")).ModerationPeriod);
            }
            set
            {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_SearchCriteria")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_A_ARG_TYPE_Filter
        {
            get
            {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Filter")).Accumulator);
            }
            set
            {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Filter")).Accumulator = value;
            }
        }
        public double ModerationDuration_A_ARG_TYPE_Filter
        {
            get
            {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Filter")).ModerationPeriod);
            }
            set
            {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Filter")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_A_ARG_TYPE_Featurelist
        {
            get
            {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Featurelist")).Accumulator);
            }
            set
            {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Featurelist")).Accumulator = value;
            }
        }
        public double ModerationDuration_A_ARG_TYPE_Featurelist
        {
            get
            {
                return (((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Featurelist")).ModerationPeriod);
            }
            set
            {
                ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Featurelist")).ModerationPeriod = value;
            }
        }
        public delegate void Delegate_Browse(System.String ObjectID, DvContentDirectory.Enum_A_ARG_TYPE_BrowseFlag BrowseFlag, System.String Filter, System.UInt32 StartingIndex, System.UInt32 RequestedCount, System.String SortCriteria, out System.String Result, out System.UInt32 NumberReturned, out System.UInt32 TotalMatches, out System.UInt32 UpdateID);
        public delegate void Delegate_GetSearchCapabilities(out System.String SearchCaps);
        public delegate void Delegate_GetSortCapabilities(out System.String SortCaps);
        public delegate void Delegate_X_GetFeatureList(out System.String FeatureList);
        public delegate void Delegate_GetSystemUpdateID(out System.UInt32 Id);
        public delegate void Delegate_Search(System.String ContainerID, System.String SearchCriteria, System.String Filter, System.UInt32 StartingIndex, System.UInt32 RequestedCount, System.String SortCriteria, out System.String Result, out System.UInt32 NumberReturned, out System.UInt32 TotalMatches, out System.UInt32 UpdateID);


        public Delegate_Browse External_Browse = null;
        public Delegate_GetSearchCapabilities External_GetSearchCapabilities = null;
        public Delegate_GetSortCapabilities External_GetSortCapabilities = null;
        public Delegate_GetSystemUpdateID External_GetSystemUpdateID = null;
        public Delegate_X_GetFeatureList External_X_GetFeatureList = null;
        public Delegate_Search External_Search = null;

        public void RemoveStateVariable_A_ARG_TYPE_BrowseFlag()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_BrowseFlag"));
        }
        public void RemoveStateVariable_ContainerUpdateIDs()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("ContainerUpdateIDs"));
        }
        public void RemoveStateVariable_SystemUpdateID()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("SystemUpdateID"));
        }
        public void RemoveStateVariable_A_ARG_TYPE_Count()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Count"));
        }
        public void RemoveStateVariable_A_ARG_TYPE_SortCriteria()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_SortCriteria"));
        }
        public void RemoveStateVariable_SortCapabilities()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("SortCapabilities"));
        }
        public void RemoveStateVariable_A_ARG_TYPE_Index()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Index"));
        }
        public void RemoveStateVariable_A_ARG_TYPE_ObjectID()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_ObjectID"));
        }
        public void RemoveStateVariable_A_ARG_TYPE_UpdateID()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_UpdateID"));
        }
        public void RemoveStateVariable_A_ARG_TYPE_Result()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Result"));
        }
        public void RemoveStateVariable_SearchCapabilities()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("SearchCapabilities"));
        }
        public void RemoveStateVariable_A_ARG_TYPE_SearchCriteria()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_SearchCriteria"));
        }
        public void RemoveStateVariable_A_ARG_TYPE_Filter()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Filter"));
        }
        public void RemoveStateVariable_A_ARG_TYPE_Featurelist()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Featurelist"));
        }
        public void RemoveAction_Browse()
        {
            _S.GetUPnPService().RemoveMethod("Browse");
        }
        public void RemoveAction_GetSearchCapabilities()
        {
            _S.GetUPnPService().RemoveMethod("GetSearchCapabilities");
        }
        public void RemoveAction_GetSortCapabilities()
        {
            _S.GetUPnPService().RemoveMethod("GetSortCapabilities");
        }
        public void RemoveAction_GetSystemUpdateID()
        {
            _S.GetUPnPService().RemoveMethod("GetSystemUpdateID");
        }
        public void RemoveAction_X_GetFeatureList()
        {
            _S.GetUPnPService().RemoveMethod("X_GetFeatureList");
        }
        public void RemoveAction_Search()
        {
            _S.GetUPnPService().RemoveMethod("Search");
        }
        public System.Net.IPEndPoint GetCaller()
        {
            return (_S.GetUPnPService().GetCaller());
        }
        public System.Net.IPEndPoint GetReceiver()
        {
            return (_S.GetUPnPService().GetReceiver());
        }

        private class _DvContentDirectory
        {
            private DvContentDirectory Outer = null;
            private UPnPService S;
            internal _DvContentDirectory(DvContentDirectory n)
            {
                Outer = n;
                S = BuildUPnPService();
            }
            public UPnPService GetUPnPService()
            {
                return (S);
            }
            public void SetStateVariable(string VarName, object VarValue)
            {
                S.SetStateVariable(VarName, VarValue);
            }
            public object GetStateVariable(string VarName)
            {
                return (S.GetStateVariable(VarName));
            }
            protected UPnPService BuildUPnPService()
            {
                UPnPStateVariable[] RetVal = new UPnPStateVariable[14];
                RetVal[0] = new UPnPModeratedStateVariable("A_ARG_TYPE_BrowseFlag", typeof(System.String), false);
                RetVal[0].AllowedStringValues = new string[2] { "BrowseMetadata", "BrowseDirectChildren" };
                RetVal[0].AddAssociation("Browse", "BrowseFlag");
                RetVal[1] = new UPnPModeratedStateVariable("ContainerUpdateIDs", typeof(System.String), true);
                RetVal[2] = new UPnPModeratedStateVariable("SystemUpdateID", typeof(System.UInt32), true);
                RetVal[2].AddAssociation("GetSystemUpdateID", "Id");
                RetVal[3] = new UPnPModeratedStateVariable("A_ARG_TYPE_Count", typeof(System.UInt32), false);
                RetVal[3].AddAssociation("Browse", "RequestedCount");
                RetVal[3].AddAssociation("Browse", "NumberReturned");
                RetVal[3].AddAssociation("Browse", "TotalMatches");
                RetVal[3].AddAssociation("Search", "RequestedCount");
                RetVal[3].AddAssociation("Search", "NumberReturned");
                RetVal[3].AddAssociation("Search", "TotalMatches");
                RetVal[4] = new UPnPModeratedStateVariable("A_ARG_TYPE_SortCriteria", typeof(System.String), false);
                RetVal[4].AddAssociation("Browse", "SortCriteria");
                RetVal[4].AddAssociation("Search", "SortCriteria");
                RetVal[5] = new UPnPModeratedStateVariable("SortCapabilities", typeof(System.String), false);
                RetVal[5].AddAssociation("GetSortCapabilities", "SortCaps");
                RetVal[6] = new UPnPModeratedStateVariable("A_ARG_TYPE_Index", typeof(System.UInt32), false);
                RetVal[6].AddAssociation("Browse", "StartingIndex");
                RetVal[6].AddAssociation("Search", "StartingIndex");
                RetVal[7] = new UPnPModeratedStateVariable("A_ARG_TYPE_ObjectID", typeof(System.String), false);
                RetVal[7].AddAssociation("Browse", "ObjectID");
                RetVal[7].AddAssociation("Search", "ContainerID");
                RetVal[8] = new UPnPModeratedStateVariable("A_ARG_TYPE_UpdateID", typeof(System.UInt32), false);
                RetVal[8].AddAssociation("Browse", "UpdateID");
                RetVal[8].AddAssociation("Search", "UpdateID");
                RetVal[9] = new UPnPModeratedStateVariable("A_ARG_TYPE_Result", typeof(System.String), false);
                RetVal[9].AddAssociation("Browse", "Result");
                RetVal[9].AddAssociation("Search", "Result");
                RetVal[10] = new UPnPModeratedStateVariable("SearchCapabilities", typeof(System.String), false);
                RetVal[10].AddAssociation("GetSearchCapabilities", "SearchCaps");
                RetVal[11] = new UPnPModeratedStateVariable("A_ARG_TYPE_SearchCriteria", typeof(System.String), false);
                RetVal[11].AddAssociation("Search", "SearchCriteria");
                RetVal[12] = new UPnPModeratedStateVariable("A_ARG_TYPE_Filter", typeof(System.String), false);
                RetVal[12].AddAssociation("Browse", "Filter");
                RetVal[12].AddAssociation("Search", "Filter");
                RetVal[13] = new UPnPModeratedStateVariable("A_ARG_TYPE_Featurelist", typeof(System.String), false);
                RetVal[13].AddAssociation("X_GetFeatureList", "Featurelist");

                UPnPService S = new UPnPService(1, "urn:upnp-org:serviceId:ContentDirectory", "urn:schemas-upnp-org:service:ContentDirectory:1", true, this);
                for (int i = 0; i < RetVal.Length; ++i)
                {
                    S.AddStateVariable(RetVal[i]);
                }
                S.AddMethod("Browse");
                S.AddMethod("GetSearchCapabilities");
                S.AddMethod("GetSortCapabilities");
                S.AddMethod("GetSystemUpdateID");
                S.AddMethod("X_GetFeatureList");
                S.AddMethod("Search");
                return (S);
            }

            public void Browse(System.String ObjectID, System.String BrowseFlag, System.String Filter, System.UInt32 StartingIndex, System.UInt32 RequestedCount, System.String SortCriteria, out System.String Result, out System.UInt32 NumberReturned, out System.UInt32 TotalMatches, out System.UInt32 UpdateID)
            {
                Enum_A_ARG_TYPE_BrowseFlag e_BrowseFlag;
                switch (BrowseFlag)
                {
                    case "BrowseMetadata":
                        e_BrowseFlag = Enum_A_ARG_TYPE_BrowseFlag.BROWSEMETADATA;
                        break;
                    case "BrowseDirectChildren":
                        e_BrowseFlag = Enum_A_ARG_TYPE_BrowseFlag.BROWSEDIRECTCHILDREN;
                        break;
                    default:
                        e_BrowseFlag = 0;
                        break;
                }
                if (Outer.External_Browse != null)
                {
                    Outer.External_Browse(ObjectID, e_BrowseFlag, Filter, StartingIndex, RequestedCount, SortCriteria, out Result, out NumberReturned, out TotalMatches, out UpdateID);
                }
                else
                {
                    Sink_Browse(ObjectID, e_BrowseFlag, Filter, StartingIndex, RequestedCount, SortCriteria, out Result, out NumberReturned, out TotalMatches, out UpdateID);
                }
            }
            public void GetSearchCapabilities(out System.String SearchCaps)
            {
                if (Outer.External_GetSearchCapabilities != null)
                {
                    Outer.External_GetSearchCapabilities(out SearchCaps);
                }
                else
                {
                    Sink_GetSearchCapabilities(out SearchCaps);
                }
            }
            public void GetSortCapabilities(out System.String SortCaps)
            {
                if (Outer.External_GetSortCapabilities != null)
                {
                    Outer.External_GetSortCapabilities(out SortCaps);
                }
                else
                {
                    Sink_GetSortCapabilities(out SortCaps);
                }
            }
            public void GetSystemUpdateID(out System.UInt32 Id)
            {
                if (Outer.External_GetSystemUpdateID != null)
                {
                    Outer.External_GetSystemUpdateID(out Id);
                }
                else
                {
                    Sink_GetSystemUpdateID(out Id);
                }
            }
            public void X_GetFeatureList(out System.String Featurelist)
            {
                if (Outer.External_X_GetFeatureList != null)
                {
                    Outer.External_X_GetFeatureList(out Featurelist);
                }
                else
                {
                    Sink_X_GetFeatureList(out Featurelist);
                }
            }
            public void Search(System.String ContainerID, System.String SearchCriteria, System.String Filter, System.UInt32 StartingIndex, System.UInt32 RequestedCount, System.String SortCriteria, out System.String Result, out System.UInt32 NumberReturned, out System.UInt32 TotalMatches, out System.UInt32 UpdateID)
            {
                if (Outer.External_Search != null)
                {
                    Outer.External_Search(ContainerID, SearchCriteria, Filter, StartingIndex, RequestedCount, SortCriteria, out Result, out NumberReturned, out TotalMatches, out UpdateID);
                }
                else
                {
                    Sink_Search(ContainerID, SearchCriteria, Filter, StartingIndex, RequestedCount, SortCriteria, out Result, out NumberReturned, out TotalMatches, out UpdateID);
                }
            }

            public Delegate_Browse Sink_Browse;
            public Delegate_GetSearchCapabilities Sink_GetSearchCapabilities;
            public Delegate_GetSortCapabilities Sink_GetSortCapabilities;
            public Delegate_GetSystemUpdateID Sink_GetSystemUpdateID;
            public Delegate_X_GetFeatureList Sink_X_GetFeatureList;
            public Delegate_Search Sink_Search;
        }
        public DvContentDirectory()
        {
            _S = new _DvContentDirectory(this);
            _S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_BrowseFlag").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_A_ARG_TYPE_BrowseFlag);
            _S.GetUPnPService().GetStateVariableObject("ContainerUpdateIDs").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_ContainerUpdateIDs);
            _S.GetUPnPService().GetStateVariableObject("SystemUpdateID").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_SystemUpdateID);
            _S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Count").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_A_ARG_TYPE_Count);
            _S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_SortCriteria").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_A_ARG_TYPE_SortCriteria);
            _S.GetUPnPService().GetStateVariableObject("SortCapabilities").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_SortCapabilities);
            _S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Index").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_A_ARG_TYPE_Index);
            _S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_ObjectID").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_A_ARG_TYPE_ObjectID);
            _S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_UpdateID").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_A_ARG_TYPE_UpdateID);
            _S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Result").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_A_ARG_TYPE_Result);
            _S.GetUPnPService().GetStateVariableObject("SearchCapabilities").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_SearchCapabilities);
            _S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_SearchCriteria").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_A_ARG_TYPE_SearchCriteria);
            _S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Filter").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_A_ARG_TYPE_Filter);
            _S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Featurelist").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_A_ARG_TYPE_Featurelist);
            _S.Sink_Browse = new Delegate_Browse(Browse);
            _S.Sink_GetSearchCapabilities = new Delegate_GetSearchCapabilities(GetSearchCapabilities);
            _S.Sink_GetSortCapabilities = new Delegate_GetSortCapabilities(GetSortCapabilities);
            _S.Sink_GetSystemUpdateID = new Delegate_GetSystemUpdateID(GetSystemUpdateID);
            _S.Sink_X_GetFeatureList = new Delegate_X_GetFeatureList(X_GetFeatureList);
            _S.Sink_Search = new Delegate_Search(Search);
        }
        public DvContentDirectory(string ID)
            : this()
        {
            _S.GetUPnPService().ServiceID = ID;
        }
        public UPnPService GetUPnPService()
        {
            return (_S.GetUPnPService());
        }
        private void OnModifiedSink_A_ARG_TYPE_BrowseFlag(UPnPStateVariable sender, object NewValue)
        {
            if (OnStateVariableModified_A_ARG_TYPE_BrowseFlag != null) OnStateVariableModified_A_ARG_TYPE_BrowseFlag(this);
        }
        private void OnModifiedSink_ContainerUpdateIDs(UPnPStateVariable sender, object NewValue)
        {
            if (OnStateVariableModified_ContainerUpdateIDs != null) OnStateVariableModified_ContainerUpdateIDs(this);
        }
        private void OnModifiedSink_SystemUpdateID(UPnPStateVariable sender, object NewValue)
        {
            if (OnStateVariableModified_SystemUpdateID != null) OnStateVariableModified_SystemUpdateID(this);
        }
        private void OnModifiedSink_A_ARG_TYPE_Count(UPnPStateVariable sender, object NewValue)
        {
            if (OnStateVariableModified_A_ARG_TYPE_Count != null) OnStateVariableModified_A_ARG_TYPE_Count(this);
        }
        private void OnModifiedSink_A_ARG_TYPE_SortCriteria(UPnPStateVariable sender, object NewValue)
        {
            if (OnStateVariableModified_A_ARG_TYPE_SortCriteria != null) OnStateVariableModified_A_ARG_TYPE_SortCriteria(this);
        }
        private void OnModifiedSink_SortCapabilities(UPnPStateVariable sender, object NewValue)
        {
            if (OnStateVariableModified_SortCapabilities != null) OnStateVariableModified_SortCapabilities(this);
        }
        private void OnModifiedSink_A_ARG_TYPE_Index(UPnPStateVariable sender, object NewValue)
        {
            if (OnStateVariableModified_A_ARG_TYPE_Index != null) OnStateVariableModified_A_ARG_TYPE_Index(this);
        }
        private void OnModifiedSink_A_ARG_TYPE_ObjectID(UPnPStateVariable sender, object NewValue)
        {
            if (OnStateVariableModified_A_ARG_TYPE_ObjectID != null) OnStateVariableModified_A_ARG_TYPE_ObjectID(this);
        }
        private void OnModifiedSink_A_ARG_TYPE_UpdateID(UPnPStateVariable sender, object NewValue)
        {
            if (OnStateVariableModified_A_ARG_TYPE_UpdateID != null) OnStateVariableModified_A_ARG_TYPE_UpdateID(this);
        }
        private void OnModifiedSink_A_ARG_TYPE_Result(UPnPStateVariable sender, object NewValue)
        {
            if (OnStateVariableModified_A_ARG_TYPE_Result != null) OnStateVariableModified_A_ARG_TYPE_Result(this);
        }
        private void OnModifiedSink_SearchCapabilities(UPnPStateVariable sender, object NewValue)
        {
            if (OnStateVariableModified_SearchCapabilities != null) OnStateVariableModified_SearchCapabilities(this);
        }
        private void OnModifiedSink_A_ARG_TYPE_SearchCriteria(UPnPStateVariable sender, object NewValue)
        {
            if (OnStateVariableModified_A_ARG_TYPE_SearchCriteria != null) OnStateVariableModified_A_ARG_TYPE_SearchCriteria(this);
        }
        private void OnModifiedSink_A_ARG_TYPE_Filter(UPnPStateVariable sender, object NewValue)
        {
            if (OnStateVariableModified_A_ARG_TYPE_Filter != null) OnStateVariableModified_A_ARG_TYPE_Filter(this);
        }
        private void OnModifiedSink_A_ARG_TYPE_Featurelist(UPnPStateVariable sender, object NewValue)
        {
            if (OnStateVariableModified_A_ARG_TYPE_Featurelist != null) OnStateVariableModified_A_ARG_TYPE_Featurelist(this);
        }
        //}}}}} End of Code Block

        #endregion

        internal string GetMp3StreamItem()
        {
            var audioFormat = AudioSettings.GetAudioFormat();
            // _class : "object.item.audioItem.audioBroadcast" vs "object.item.audioItem.musicTrack";
            // protInfo : "http-get:*:audio/mpeg:DLNA.ORG_PN=MP3;DLNA.ORG_OP=01"; //"http-get:*:audio/mpeg:*"; ;
            return GetMusItem("141", "14", "False", "Stream What You Hear (MP3)",
                           Environment.MachineName, "Stream What You Hear", "Streaming",
                           "17:00:00.000", (AudioSettings.GetMP3Bitrate() * 1000).ToString(), audioFormat.SampleRate.ToString(), audioFormat.Channels.ToString(), audioFormat.BitsPerSample.ToString(),
                           "http-get:*:audio/mpeg:*",
                           "swyh.mp3", "object.item.audioItem.audioBroadcast");
        }


        internal string GetL16StreamItem()
        {
            var audioFormat = AudioSettings.GetAudioFormat();
            // _class : "object.item.audioItem.audioBroadcast" vs "object.item.audioItem.musicTrack";
            // protInfo : "http-get:*:audio/mpeg:DLNA.ORG_PN=MP3;DLNA.ORG_OP=01"; //"http-get:*:audio/mpeg:*"; ;
            return GetMusItem("142", "14", "False", "Stream What You Hear (PCM/L16)",
                           Environment.MachineName, "Stream What You Hear", "Streaming",
                           "17:00:00.000", (AudioSettings.GetMP3Bitrate() * 1000).ToString(), audioFormat.SampleRate.ToString(), audioFormat.Channels.ToString(), audioFormat.BitsPerSample.ToString(),
                           "http-get:*:audio/L16;rate=" + audioFormat.SampleRate.ToString() + ";channels=" + audioFormat.Channels.ToString() + ":*",
                           "swyh.wav", "object.item.audioItem.audioBroadcast");
        }

        #region Basic Actions

        /// <summary>
        /// Action: GetSearchCapabilities
        /// </summary>
        /// <param name="SearchCaps">Associated State Variable: SearchCapabilities</param>
        public void GetSearchCapabilities(out System.String SearchCaps)
        {
            // Action: GetSearchCapabilities
            // This action returns the searching capabilities that are supported by the device.
            SearchCaps = String.Empty;
        }

        /// <summary>
        /// Action: GetSortCapabilities
        /// </summary>
        /// <param name="SortCaps">Associated State Variable: SortCapabilities</param>
        public void GetSortCapabilities(out System.String SortCaps)
        {
            // Action: GetSortCapabilities
            // Returns the CSV list of meta-data tags that can be used in sortCriteria
            SortCaps = String.Empty;
        }

        /// <summary>
        /// Action: GetSystemUpdateID
        /// </summary>
        /// <param name="Id">Associated State Variable: SystemUpdateID</param>
        public void GetSystemUpdateID(out System.UInt32 Id)
        {
            // Action: GetSystemUpdateID
            // This action returns the current value of state variable SystemUpdateID. 
            // It can be used by clients that want to ‘poll’ for any changes in the Content Directory 
            // (as opposed to subscribing to events).
            Id = 0;
        }

        /// <summary>
        /// Action: X_GetFeatureList
        /// </summary>
        /// <param name="Featurelist">Associated State Variable: Featurelist</param>
        public void X_GetFeatureList(out System.String Featurelist)
        {
            // Action: X_GetFeatureList
            // This action returns the current value of state variable Featurelist. 
            // It can be used by clients that want to ‘poll’ for any changes in the Content Directory 
            // (as opposed to subscribing to events).
            Featurelist = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
                            "<Features xmlns=\"urn:schemas-upnp-org:av:avs\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"urn:schemas-upnp-org:av:avs http://www.upnp.org/schemas/av/avs.xsd\">" +
                             "<Feature name=\"samsung.com_BASICVIEW\" version=\"1\">" +
                                "<container id=\"I\" type=\"object.item.imageItem\"/>" +
                                "<container id=\"A\" type=\"object.item.audioItem\"/>" +
                                "<container id=\"V\" type=\"object.item.videoItem\"/>" +
                             "</Feature></Features>";
        }

        #endregion

        /// <summary>
        /// Action: Browse
        /// </summary>
        /// <param name="ObjectID">Associated State Variable: A_ARG_TYPE_ObjectID</param>
        /// <param name="BrowseFlag">Associated State Variable: A_ARG_TYPE_BrowseFlag</param>
        /// <param name="Filter">Associated State Variable: A_ARG_TYPE_Filter</param>
        /// <param name="StartingIndex">Associated State Variable: A_ARG_TYPE_Index</param>
        /// <param name="RequestedCount">Associated State Variable: A_ARG_TYPE_Count</param>
        /// <param name="SortCriteria">Associated State Variable: A_ARG_TYPE_SortCriteria</param>
        /// <param name="Result">Associated State Variable: A_ARG_TYPE_Result</param>
        /// <param name="NumberReturned">Associated State Variable: A_ARG_TYPE_Count</param>
        /// <param name="TotalMatches">Associated State Variable: A_ARG_TYPE_Count</param>
        /// <param name="UpdateID">Associated State Variable: A_ARG_TYPE_UpdateID</param>
        public void Browse(System.String ObjectID, Enum_A_ARG_TYPE_BrowseFlag BrowseFlag, System.String Filter, System.UInt32 StartingIndex, System.UInt32 RequestedCount, System.String SortCriteria, out System.String Result, out System.UInt32 NumberReturned, out System.UInt32 TotalMatches, out System.UInt32 UpdateID)
        {
            //Console.WriteLine("ContentDirectory_Browse(" + ObjectID.ToString() + " / " + BrowseFlag.ToString() + " / " + Filter.ToString() + " / " + StartingIndex.ToString() + " / " + RequestedCount.ToString() + " / " + SortCriteria.ToString() + ")");
            Result = "";
            NumberReturned = 0;
            TotalMatches = 0;
            UpdateID = 0;

            if (BrowseFlag == DvContentDirectory.Enum_A_ARG_TYPE_BrowseFlag.BROWSEMETADATA)
            {
                switch (ObjectID)
                {
                    case "0":
                        NumberReturned = 1;
                        TotalMatches = 1;
                        Result = DidlHandler.BeginDidl() + DidlHandler.GetContainer("0", "-1", "root") + DidlHandler.EndDidl();
                        break;
                    case "14":
                        NumberReturned = 1;
                        TotalMatches = 1;
                        Result = DidlHandler.BeginDidl() + DidlHandler.GetContainer("14", "0", "Music", "object.container.storageFolder") + DidlHandler.EndDidl();
                        break;
                    case "141":
                        NumberReturned = 1;
                        TotalMatches = 1;
                        Result = DidlHandler.BeginDidl() + this.GetMp3StreamItem() + DidlHandler.EndDidl();
                        break;
                    default:
                        break;
                }
            }
            else if (BrowseFlag == DvContentDirectory.Enum_A_ARG_TYPE_BrowseFlag.BROWSEDIRECTCHILDREN)
            {
                //Result = "<DIDL-Lite xmlns=\"urn:schemas-upnp-org:metadata-1-0/DIDL-Lite/\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:upnp=\"urn:schemas-upnp-org:metadata-1-0/upnp/\">" +
                //            "<container id=\"14\" parentID=\"\" childCount=\"0\"><dc:title>Music</dc:title><upnp:class>object.container.storageFolder</upnp:class></container>" +
                //            //"<container id=\"15\" parentID=\"\" childCount=\"0\"><dc:title>Videos</dc:title><upnp:class>object.container.storageFolder</upnp:class></container>" +
                //            //"<container id=\"16\" parentID=\"\" childCount=\"0\"><dc:title>Pictures</dc:title><upnp:class>object.container.storageFolder</upnp:class></container>" +
                //            "</DIDL-Lite>";
                StringBuilder sb;
                switch (ObjectID)
                {
                    case constRoot:
                        NumberReturned = 1;
                        TotalMatches = 1;
                        Result = DidlHandler.BeginDidl() + DidlHandler.GetContainer("14", "0", "Music", "object.container.storageFolder") + DidlHandler.EndDidl();
                        break;
                    case constMusicItem:
                    case constMusicGenre:
                    case constMusicArtist:
                    case constMusicAlbum:
                    case constMusicPlaylist:
                    case constMusic:
                        sb = new StringBuilder();
                        sb.Append(DidlHandler.BeginDidl());
                        sb.Append(this.GetMp3StreamItem());
                        sb.Append(this.GetL16StreamItem());
                        sb.Append(DidlHandler.EndDidl());

                        NumberReturned = 2;
                        TotalMatches = 2;
                        Result = sb.ToString();

                        break;
                    case constVideos:
                    case constPictures:
                    default:
                        break;
                }
            }
        }

        /// <summary>
        /// Action: Search
        /// </summary>
        /// <param name="ContainerID">Associated State Variable: A_ARG_TYPE_ObjectID</param>
        /// <param name="SearchCriteria">Associated State Variable: A_ARG_TYPE_SearchCriteria</param>
        /// <param name="Filter">Associated State Variable: A_ARG_TYPE_Filter</param>
        /// <param name="StartingIndex">Associated State Variable: A_ARG_TYPE_Index</param>
        /// <param name="RequestedCount">Associated State Variable: A_ARG_TYPE_Count</param>
        /// <param name="SortCriteria">Associated State Variable: A_ARG_TYPE_SortCriteria</param>
        /// <param name="Result">Associated State Variable: A_ARG_TYPE_Result</param>
        /// <param name="NumberReturned">Associated State Variable: A_ARG_TYPE_Count</param>
        /// <param name="TotalMatches">Associated State Variable: A_ARG_TYPE_Count</param>
        /// <param name="UpdateID">Associated State Variable: A_ARG_TYPE_UpdateID</param>
        public void Search(System.String ContainerID, System.String SearchCriteria, System.String Filter, System.UInt32 StartingIndex, System.UInt32 RequestedCount, System.String SortCriteria, out System.String Result, out System.UInt32 NumberReturned, out System.UInt32 TotalMatches, out System.UInt32 UpdateID)
        {
            // Action: Search
            // This action allows the caller to search the content directory for objects that match 
            // some search criteria. The search criteria are specified as a query string operating on 
            // properties with comparison and logical operators.
            Result = String.Empty;
            NumberReturned = 0;
            TotalMatches = 0;
            UpdateID = 0;

            //http://code.google.com/p/jems/wiki/XBox360Notes
            //4 audioItem
            //5 musicGenre
            //6 musicArtist
            //7 musicAlbum
            //F playlistContainer
            //14 folders
            if (ContainerID.StartsWith("0") == true ||
                ContainerID.StartsWith("4") == true ||
                ContainerID.StartsWith("5") == true ||
                ContainerID.StartsWith("6") == true ||
                ContainerID.StartsWith("7") == true ||
                ContainerID.StartsWith("F") == true ||
                ContainerID.StartsWith("14") == true)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append(DidlHandler.BeginDidl());

                NumberReturned = 0;
                TotalMatches = 0;

                //if (SearchCriteria.IndexOf("upnp:class derivedfrom \"object.item.imageItem\"", StringComparison.InvariantCultureIgnoreCase) == -1 &&
                //    SearchCriteria.IndexOf("upnp:class derivedfrom \"object.item.videoItem\"", StringComparison.InvariantCultureIgnoreCase) == -1)
                if (SearchCriteria.IndexOf("upnp:class derivedfrom \"object.item.audioItem\"", StringComparison.InvariantCultureIgnoreCase) >= 0)
                {
                    // Always JUMP to 4 !
                    ContainerID = "4";

                    if (ContainerID == "0")
                    {
                        //NumberReturned = 1;
                        TotalMatches = 1;
                        sb.AppendLine(DidlHandler.GetContainer("14", "0", "Music", "object.container.storageFolder"));
                        //Result = "<DIDL-Lite xmlns=\"urn:schemas-upnp-org:metadata-1-0/DIDL-Lite/\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:upnp=\"urn:schemas-upnp-org:metadata-1-0/upnp/\">" +
                        //    "<container id=\"14\" parentID=\"\" childCount=\"0\"><dc:title>Live Stream</dc:title><upnp:class>object.container.storageFolder</upnp:class></container>" +
                        //    //"<container id=\"15\" parentID=\"\" childCount=\"0\"><dc:title>Videos</dc:title><upnp:class>object.container.storageFolder</upnp:class></container>" +
                        //    //"<container id=\"16\" parentID=\"\" childCount=\"0\"><dc:title>Pictures</dc:title><upnp:class>object.container.storageFolder</upnp:class></container>" +
                        //    "</DIDL-Lite>";
                    }
                    else if (ContainerID == "4" || ContainerID == "5" || ContainerID == "6" || ContainerID == "7" || ContainerID == "14") //return all songs
                    {
                        sb.Append(this.GetMp3StreamItem());
                        sb.Append(this.GetL16StreamItem());

                        TotalMatches = 2;
                    }
                }

                //TODO respect # requested from client
                NumberReturned = TotalMatches;

                sb.Append(DidlHandler.EndDidl());
                Result = sb.ToString();
            }
        }

        internal MediaItem GetWasapiMediaItem()
        {
            var xml = new XmlDocument();
            StringBuilder sb = new StringBuilder();
            sb.Append(DidlHandler.BeginDidl());
            if (AudioSettings.GetStreamFormat() == AudioFormats.Format.Pcm)
            {
                sb.Append(this.GetL16StreamItem());
            }
            else
            {
                sb.Append(this.GetMp3StreamItem());
            }
            sb.Append(DidlHandler.EndDidl());

            xml.LoadXml(sb.ToString());
            var xmlElement = (XmlElement)xml.GetElementsByTagName("item")[0];
            return new MediaItem(xmlElement);
        }

        internal List<string> GetWasapiUris(AudioFormats.Format format)
        {
            // TODO : res in parameter + remoteInterface !
            List<string> uris = new List<string>();
            foreach (var item in this.GetUPnPService().ParentDevice.LocalIPEndPoints)
            {
                if (item.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork && !item.ToString().StartsWith("127.0.0.1") && !item.ToString().StartsWith("169"))
                {
                    uris.Add("http://" + item.ToString() + "/stream/swyh." + (format == AudioFormats.Format.Pcm ? "wav" : "mp3"));
                }
            }
            return uris;
        }

        protected string GetMusItem(string id, string parentID, string restricted, string title,
           string artist, string album, string genre,
           string duration, string bitrate, string sampleFrequency, string nrAudioChannels, string bitsPerSample,
           string protocolInfo, string resFileName, string upnpClass)
        {
            //<item restricted="true" id="0/1/5/13414/13681" parentID="4">
            //<dc:title>Checkered Floor</dc:title>
            //<upnp:artist>Silversun Pickups</upnp:artist>
            //<res bitsPerSample="16" protocolInfo="http-get:*:audio/mpeg:*" duration="00:04:51.000" nrAudioChannels="2" bitrate="16000" sampleFrequency="44100">http://192.168.0.199:41952/getres/13681/_file_.mp3</res>
            //<upnp:album>Carnavas</upnp:album>
            //<upnp:genre>Indie</upnp:genre>
            //<upnp:class>object.item.audioItem.musicTrack</upnp:class>
            //</item>
            StringBuilder ressources = new StringBuilder();
            List<IPEndPoint> endPointsList = new List<IPEndPoint>();
            try
            {
                endPointsList.Add(this.GetReceiver());
            }
            catch (NullReferenceException)
            {
                endPointsList.AddRange(this.GetUPnPService().ParentDevice.LocalIPEndPoints);
            }
            foreach (IPEndPoint ip in endPointsList)
            {
                if (ip.AddressFamily == AddressFamily.InterNetwork && !ip.ToString().StartsWith("127.0.0.1"))
                {
                    ressources.Append("<res bitsPerSample=\"" + bitsPerSample + "\" protocolInfo=\"" + protocolInfo + "\" duration=\"" + duration + "\" nrAudioChannels=\"" + nrAudioChannels + "\" bitrate=\"" + bitrate + "\" sampleFrequency=\"" + sampleFrequency + "\">" +
                                            HttpUtility.HtmlEncode("http://" + ip.ToString() + "/stream/" + resFileName) +
                                       "</res>");
                }
            }
            return "<item id=\"" + id + "\" parentID=\"" + parentID + "\" restricted=\"" + restricted + "\">" +
                        "<dc:title>" + HttpUtility.HtmlEncode(title) + "</dc:title>" +
                        "<upnp:artist>" + artist + "</upnp:artist>" +
                        ressources.ToString() +
                        "<upnp:album>" + album + "</upnp:album>" +
                        "<upnp:genre>" + genre + "</upnp:genre>" +
                        "<upnp:class>" + upnpClass + "</upnp:class>" +
                    "</item>";
        }

        #region Not Implemented

        ///// <summary>
        ///// Action: GetTransferProgress
        ///// </summary>
        ///// <param name="TransferID">Associated State Variable: A_ARG_TYPE_TransferID</param>
        ///// <param name="TransferStatus">Associated State Variable: A_ARG_TYPE_TransferStatus</param>
        ///// <param name="TransferLength">Associated State Variable: A_ARG_TYPE_TransferLength</param>
        ///// <param name="TransferTotal">Associated State Variable: A_ARG_TYPE_TransferTotal</param>
        //public void GetTransferProgress(System.UInt32 TransferID, out Enum_A_ARG_TYPE_TransferStatus TransferStatus, out System.String TransferLength, out System.String TransferTotal)
        //{
        //    //ToDo: Add Your implementation here, and remove exception
        //    throw (new UPnPCustomException(800, "This method has not been completely implemented..."));
        //}
        ///// <summary>
        ///// Action: StopTransferResource
        ///// </summary>
        ///// <param name="TransferID">Associated State Variable: A_ARG_TYPE_TransferID</param>
        //public void StopTransferResource(System.UInt32 TransferID)
        //{
        //    //ToDo: Add Your implementation here, and remove exception
        //    throw (new UPnPCustomException(800, "This method has not been completely implemented..."));
        //}
        ///// <summary>
        ///// Action: CreateObject
        ///// </summary>
        ///// <param name="ContainerID">Associated State Variable: A_ARG_TYPE_ObjectID</param>
        ///// <param name="Elements">Associated State Variable: A_ARG_TYPE_Result</param>
        ///// <param name="ObjectID">Associated State Variable: A_ARG_TYPE_ObjectID</param>
        ///// <param name="Result">Associated State Variable: A_ARG_TYPE_Result</param>
        //public void CreateObject(System.String ContainerID, System.String Elements, out System.String ObjectID, out System.String Result)
        //{
        //    //ToDo: Add Your implementation here, and remove exception
        //    throw (new UPnPCustomException(800, "This method has not been completely implemented..."));
        //}
        ///// <summary>
        ///// Action: CreateReference
        ///// </summary>
        ///// <param name="ContainerID">Associated State Variable: A_ARG_TYPE_ObjectID</param>
        ///// <param name="ObjectID">Associated State Variable: A_ARG_TYPE_ObjectID</param>
        ///// <param name="NewID">Associated State Variable: A_ARG_TYPE_ObjectID</param>
        //public void CreateReference(System.String ContainerID, System.String ObjectID, out System.String NewID)
        //{
        //    //ToDo: Add Your implementation here, and remove exception
        //    throw (new UPnPCustomException(800, "This method has not been completely implemented..."));
        //}
        ///// <summary>
        ///// Action: DeleteResource
        ///// </summary>
        ///// <param name="ResourceURI">Associated State Variable: A_ARG_TYPE_URI</param>
        //public void DeleteResource(System.Uri ResourceURI)
        //{
        //    //ToDo: Add Your implementation here, and remove exception
        //    throw (new UPnPCustomException(800, "This method has not been completely implemented..."));
        //}
        ///// <summary>
        ///// Action: DestroyObject
        ///// </summary>
        ///// <param name="ObjectID">Associated State Variable: A_ARG_TYPE_ObjectID</param>
        //public void DestroyObject(System.String ObjectID)
        //{
        //    //ToDo: Add Your implementation here, and remove exception
        //    throw (new UPnPCustomException(800, "This method has not been completely implemented..."));
        //}
        ///// <summary>
        ///// Action: ExportResource
        ///// </summary>
        ///// <param name="SourceURI">Associated State Variable: A_ARG_TYPE_URI</param>
        ///// <param name="DestinationURI">Associated State Variable: A_ARG_TYPE_URI</param>
        ///// <param name="TransferID">Associated State Variable: A_ARG_TYPE_TransferID</param>
        //public void ExportResource(System.Uri SourceURI, System.Uri DestinationURI, out System.UInt32 TransferID)
        //{
        //    //ToDo: Add Your implementation here, and remove exception
        //    throw (new UPnPCustomException(800, "This method has not been completely implemented..."));
        //}
        ///// <summary>
        ///// Action: ImportResource
        ///// </summary>
        ///// <param name="SourceURI">Associated State Variable: A_ARG_TYPE_URI</param>
        ///// <param name="DestinationURI">Associated State Variable: A_ARG_TYPE_URI</param>
        ///// <param name="TransferID">Associated State Variable: A_ARG_TYPE_TransferID</param>
        //public void ImportResource(System.Uri SourceURI, System.Uri DestinationURI, out System.UInt32 TransferID)
        //{
        //    //ToDo: Add Your implementation here, and remove exception
        //    throw (new UPnPCustomException(800, "This method has not been completely implemented..."));
        //}
        ///// <summary>
        ///// Action: UpdateObject
        ///// </summary>
        ///// <param name="ObjectID">Associated State Variable: A_ARG_TYPE_ObjectID</param>
        ///// <param name="CurrentTagValue">Associated State Variable: A_ARG_TYPE_TagValueList</param>
        ///// <param name="NewTagValue">Associated State Variable: A_ARG_TYPE_TagValueList</param>
        //public void UpdateObject(System.String ObjectID, System.String CurrentTagValue, System.String NewTagValue)
        //{
        //    //ToDo: Add Your implementation here, and remove exception
        //    throw (new UPnPCustomException(800, "This method has not been completely implemented..."));
        //}
        #endregion
    }
}